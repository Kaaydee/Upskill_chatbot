import hashlib
import streamlit as st
import requests
import fitz
from docx import Document
from io import BytesIO
import base64
from datetime import datetime
from pydub import AudioSegment
from streamlit_mic_recorder import mic_recorder
import uuid
from weasyprint import HTML
from io import BytesIO
import html
from gtts import gTTS
import tempfile


# H√†m chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i v√† t·∫°o file √¢m thanh
def text_to_speech(text, lang="vi"):
    tts = gTTS(text=text, lang=lang, slow=False)
    # L∆∞u file t·∫°m th·ªùi
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmpfile:
        tts.save(tmpfile.name)
        return tmpfile.name


# H√†m t·∫°o PDF t·ª´ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi
def create_pdf_html(question, answer):
    question_escaped = html.escape(question)
    answer_escaped = html.escape(answer)

    html_content = f"""
    <html>
    <head>
        <meta charset="utf-8">
        <style>
            body {{ font-family: 'DejaVu Sans', monospace, monospace; }}
            h2 {{ color: #2e6c80; }}
            pre {{
                background: #f4f4f4; 
                padding: 10px; 
                border-radius: 5px; 
                white-space: pre-wrap;
                font-family: monospace;
                font-size: 12pt;
            }}
        </style>
    </head>
    <body>
        <h2>User:</h2>
        <pre>{question_escaped}</pre>
        <h2>UpSkill's Assistant:</h2>
        <pre>{answer_escaped}</pre>
    </body>
    </html>
    """

    pdf_io = BytesIO()
    HTML(string=html_content).write_pdf(pdf_io)
    pdf_io.seek(0)
    return pdf_io


# H√†m render footer
def render_footer():
    st.markdown("""
    <style>
    .fixed-footer {
        position: fixed !important;
        bottom: 0 !important;
        left: 0 !important;
        right: 0 !important;
        width: 100% !important;
        background-color: white;
        padding: 10px 0;
        text-align: center;
        font-size: 14px;
        color: gray;
        border-top: 1px solid #eee;
        z-index: 9999;
        box-shadow: 0 -2px 5px rgba(0,0,0,0.1);
        pointer-events: auto;
    }
    </style>

    <div class='fixed-footer'>
        üìû Hotline: <strong>093 448 94 05</strong><br>
        ‚úâÔ∏è Email: <a href="mailto:upskill@upskill.edu.vn">upskill@upskill.edu.vn</a>
    </div>
    """, unsafe_allow_html=True)


# --- Giao di·ªán ---
st.set_page_config(page_title="UpskillChat", layout="centered")
st.image("logo.jpg")


def get_image_base64(path):
    with open(path, "rb") as f:
        return base64.b64encode(f.read()).decode()


# L·∫•y base64 c·ªßa logo ƒë·ªÉ d√πng l√†m avatar
logo_base64 = get_image_base64("logo.jpg")
avatar_logo = f"data:image/png;base64,{logo_base64}"
logo_base641 = get_image_base64("logo.png")
avatar_logo1 = f"data:image/png;base64,{logo_base641}"
st.title("üí¨ UpskillChat")


# --- H√†m ƒë·ªçc file ---
def read_txt(file): return file.read().decode("utf-8")


def read_pdf(file):
    doc = fitz.open(stream=file.read(), filetype="pdf")
    return "\n".join(page.get_text() for page in doc)


def read_docx(file):
    doc = Document(file)
    return "\n".join(para.text for para in doc.paragraphs)


# --- Kh·ªüi t·∫°o session ---
if "messages" not in st.session_state:
    st.session_state.messages = [
        {
            "role": "system",
            "content": (
                "B·∫°n ∆∞u ti√™n s·ª≠ d·ª•ng ng√¥n ng·ªØ theo ng√¥n ng·ªØ ƒë∆∞·ª£c prompt cung c·∫•p. "
                "N·∫øu kh√¥ng c√≥ ng√¥n ng·ªØ n√†o ƒë∆∞·ª£c cung c·∫•p, h√£y s·ª≠ d·ª•ng ti·∫øng Vi·ªát. "
                "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n h·ªó tr·ª£ gi·∫£i ƒë√°p c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn h·ªá th·ªëng h·ªçc t·∫≠p. "
                "B·∫°n c√≥ th·ªÉ nh·∫≠n c√¢u h·ªèi tr·ª±c ti·∫øp t·ª´ ng∆∞·ªùi d√πng ho·∫∑c d·ª±a v√†o n·ªôi dung ƒë∆∞·ª£c cung c·∫•p t·ª´ c√°c t·ªáp t√†i li·ªáu. "
                "Lu√¥n tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng, v√† ch√≠nh x√°c trong ph·∫°m vi kho·∫£ng 150 tokens. "
                "N·∫øu kh√¥ng ƒë·ªß th√¥ng tin, h√£y ƒë·ªÅ xu·∫•t ng∆∞·ªùi d√πng cung c·∫•p th√™m chi ti·∫øt ho·∫∑c t·∫£i l√™n t√†i li·ªáu li√™n quan."
            )
        }
    ]

if "uploaded_once" not in st.session_state:
    st.session_state.uploaded_once = False

# --- Sidebar ---
st.sidebar.markdown(
    f"""
    <div style="text-align: center; margin-bottom: 20px;">
        <img src="{avatar_logo}" style="height: 60px;" />
    </div>
    """,
    unsafe_allow_html=True
)
st.sidebar.subheader("üìÑ Qu·∫£n l√Ω t√†i li·ªáu")

if st.session_state.uploaded_once:
    if st.sidebar.button("üóëÔ∏è Xo√° t√†i li·ªáu ƒë√£ t·∫£i"):
        st.session_state.messages = [
            msg for msg in st.session_state.messages
            if not msg.get("content", "").startswith("N·ªôi dung t√†i li·ªáu:")
        ]
        st.session_state.uploaded_once = False
        st.sidebar.success("‚úÖ ƒê√£ xo√° n·ªôi dung t√†i li·ªáu.")

uploaded_file = st.sidebar.file_uploader(
    "üìé T·∫£i t√†i li·ªáu (.pdf, .docx, .txt)",
    type=["pdf", "docx", "txt"]
)

if uploaded_file and not st.session_state.uploaded_once:
    file_text = ""
    if uploaded_file.type == "application/pdf":
        file_text = read_pdf(uploaded_file)
    elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        file_text = read_docx(uploaded_file)
    elif uploaded_file.type == "text/plain":
        file_text = read_txt(uploaded_file)

    if file_text:
        st.session_state.messages.append({
            "role": "user",
            "content": f"N·ªôi dung t√†i li·ªáu:\n{file_text}"
        })
        st.session_state.uploaded_once = True
        st.sidebar.success(f"‚úÖ ƒê√£ th√™m n·ªôi dung t·ª´: {uploaded_file.name}")

# --- Hi·ªÉn th·ªã l·ªãch s·ª≠ chat ---
for i, msg in enumerate(st.session_state.messages):
    if msg["role"] == "system" or msg["content"].startswith("N·ªôi dung t√†i li·ªáu:"):
        continue

    # L·ªçc b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
    cleaned_content = msg["content"].replace("*", "").strip()

    # S·ª≠ d·ª•ng logo l√†m avatar cho assistant
    avatar = None if msg["role"] == "user" else avatar_logo1

    with st.chat_message(msg["role"], avatar=avatar):
        # Thay ƒë·ªïi c√°ch hi·ªÉn th·ªã tin nh·∫Øn
        if msg["role"] == "user":
            st.markdown(f"**User:** {cleaned_content}")  # In ƒë·∫≠m ch·ªØ User
        else:
            st.markdown(cleaned_content)  # Tin nh·∫Øn AI kh√¥ng c√≥ ƒë·ªãnh d·∫°ng ƒë·∫∑c bi·ªát

        # Ch·ªâ th√™m n√∫t Save cho tin nh·∫Øn assistant kh√¥ng c√≥ h√¨nh ·∫£nh
        if msg["role"] == "assistant" and not msg.get("image_base64"):
            if i > 0 and st.session_state.messages[i - 1]["role"] == "user":
                question = st.session_state.messages[i - 1]["content"].replace("*", "").strip()
                answer = cleaned_content
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"upskill_chat_{timestamp}.txt"
                content = f"User: {question}\n\n{answer}"  # ƒê·ªãnh d·∫°ng l∆∞u file

                pdf_buffer = create_pdf_html(question, answer)
                st.download_button(
                    label="üíæ T·∫£i Q&A",
                    data=pdf_buffer,
                    file_name=f"upskill_chat_{timestamp}.pdf",
                    mime="application/pdf",
                    key=f"save_pdf_{i}"
                )

                # T·∫°o TTS cho c√¢u tr·∫£ l·ªùi
                audio_file = text_to_speech(answer, lang="vi")  # Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i ti·∫øng Vi·ªát
                with open(audio_file, "rb") as audio_data:
                    st.download_button(
                        label="üîä T·∫£i √¢m thanh tr·∫£ l·ªùi",
                        data=audio_data,
                        file_name=f"answer_{timestamp}.mp3",
                        mime="audio/mp3"
                    )

        # X·ª≠ l√Ω hi·ªÉn th·ªã h√¨nh ·∫£nh n·∫øu c√≥
        if msg["role"] == "assistant" and msg.get("image_base64"):
            st.image(msg["image_base64"], caption="üñºÔ∏è H√¨nh ·∫£nh ƒë∆∞·ª£c t·∫°o", use_container_width=True)
            image_bytes = base64.b64decode(msg["image_base64"].split(",")[-1])
            image_key = hashlib.md5(image_bytes).hexdigest()

            st.download_button(
                label="‚¨áÔ∏è T·∫£i ·∫£nh",
                data=image_bytes,
                file_name="image.png",
                mime="image/png",
                key=f"download_{image_key}"
            )

# Kh·ªüi t·∫°o bi·∫øn key n·∫øu ch∆∞a c√≥
if "recorder_key" not in st.session_state:
    st.session_state.recorder_key = 0

# T·∫°o recorder v·ªõi key ƒë·ªông (m·ªói l·∫ßn kh√°c nhau)
voice_input = mic_recorder(
    start_prompt="üéôÔ∏è Nh·∫•n ƒë·ªÉ ghi",
    stop_prompt="üõë D·ª´ng",
    key=f"recorder_{st.session_state.recorder_key}",
    just_once=False
)

# X·ª≠ l√Ω khi c√≥ d·ªØ li·ªáu
if voice_input:
    try:
        if isinstance(voice_input, dict) and "bytes" in voice_input:
            audio_bytes = voice_input["bytes"]
        elif isinstance(voice_input, bytes):
            audio_bytes = voice_input
        else:
            st.error("voice_input kh√¥ng h·ª£p l·ªá!")
            st.stop()

        # Convert webm to mp3
        audio_segment = AudioSegment.from_file(BytesIO(audio_bytes), format="webm")
        mp3_io = BytesIO()
        audio_segment.export(mp3_io, format="mp3")
        mp3_io.seek(0)

        # G·ª≠i l√™n voice2text
        response = requests.post(
            "http://31.97.220.12:8080/voice2text",
            files={"audio": ("voice.mp3", mp3_io, "audio/mpeg")}
        )
        response.raise_for_status()
        text = response.json().get("text", "").strip()

        if not text:
            st.warning("‚ö†Ô∏è Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c n·ªôi dung gi·ªçng n√≥i.")
        else:
            st.session_state.messages.append({"role": "user", "content": text})
            with st.chat_message("user"):
                st.markdown(f"**User (t·ª´ gi·ªçng n√≥i):** {text}")

            # G·ª≠i t·ªõi Chat API
            with st.spinner("üí≠ ƒêang suy nghƒ©..."):
                res = requests.post(
                    "http://localhost:8000/chat",
                    json={"messages": st.session_state.messages}
                )
                res_data = res.json()
                reply = res_data.get("reply", "[L·ªói: Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ server]")
                image_base64 = res_data.get("image_base64")

            st.session_state.messages.append({
                "role": "assistant",
                "content": reply,
                "image_base64": image_base64
            })

        # TƒÉng key recorder ƒë·ªÉ c√≥ th·ªÉ ghi ti·∫øp l·∫ßn sau
        st.session_state.recorder_key += 1
        render_footer()
        st.rerun()

    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω voice: {e}")

# --- X·ª≠ l√Ω chat th·ªß c√¥ng ---
if prompt := st.chat_input("G√µ c√¢u h·ªèi c·ªßa b·∫°n t·∫°i ƒë√¢y..."):
    st.session_state.messages.append({"role": "user", "content": prompt})

    with st.chat_message("user"):
        st.markdown(f"**User:** {prompt}")

    try:
        render_footer()
        with st.spinner("üí≠ ƒêang suy nghƒ©..."):
            res = requests.post(
                "http://localhost:8000/chat",
                json={"messages": st.session_state.messages}
            )
            res_data = res.json()
            reply = res_data.get("reply", "[L·ªói: Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ server]")
            image_base64 = res_data.get("image_base64")

    except Exception as e:
        reply = f"[L·ªói khi g·ª≠i t·ªõi API]: {e}"
        image_base64 = None

    st.session_state.messages.append({
        "role": "assistant",
        "content": reply,
        "image_base64": image_base64
    })
    render_footer()
    st.rerun()

# --- Hi·ªÉn th·ªã footer lu√¥n ·ªü cu·ªëi trang ---
render_footer()
